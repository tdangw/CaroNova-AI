import '../js/game.js';
import { setCurrentAIName } from './novaReaction.js';
import { playSound } from './soundManager.js';

let selectedAI = 'basic';

const aiCards = document.querySelectorAll('.ai-card');
const nextBtn = document.getElementById('next-to-name-btn');
const nameOverlay = document.getElementById('name-input-overlay');
const confirmBtn = document.getElementById('confirm-name-btn');
const playerNameInput = document.getElementById('player-name-input');
const aiMenu = document.getElementById('ai-menu');
const gameContainer = document.getElementById('game-container');

// T·ª± ƒë·ªông ƒëi·ªÅn t√™n g·∫ßn nh·∫•t ƒë√£ d√πng
function autoFillLastUsedName() {
  const lastName = localStorage.getItem('playerName');
  if (lastName) {
    playerNameInput.value = lastName;
  }
}

// Ch·ªçn AI
aiCards.forEach((card) => {
  card.addEventListener('click', () => {
    aiCards.forEach((c) => c.classList.remove('selected'));
    card.classList.add('selected');
    selectedAI = card.dataset.ai;
    playSound('select'); // üîä ph√°t √¢m thanh ch·ªçn AI

    console.log('[DEBUG] AI ƒëang ch·ªçn:', selectedAI);
  });
});

// Ti·∫øp theo ‚Üí sang nh·∫≠p t√™n
nextBtn.addEventListener('click', () => {
  playSound('selectButton'); // üîä ph√°t √¢m thanh ch·ªçn n√∫t
  aiMenu.style.display = 'none';
  nameOverlay.style.display = 'flex';
  autoFillLastUsedName();
});

// B·∫Øt ƒë·∫ßu game
confirmBtn.addEventListener('click', async () => {
  playSound('gameStart'); // üîä Ph√°t nh·∫°c b·∫Øt ƒë·∫ßu
  nameOverlay.classList.add('fade-out'); // Th√™m hi·ªáu ·ª©ng m·ªù d·∫ßn

  setTimeout(async () => {
    nameOverlay.style.display = 'none';
    gameContainer.style.display = 'block';

    let name = playerNameInput.value.trim();
    if (!name) name = 'Player';

    const selectedCard = document.querySelector('.ai-card.selected');
    const aiName = selectedCard.dataset.name;
    const aiAvatar = selectedCard.dataset.avatar;

    localStorage.setItem('playerName', name);
    localStorage.setItem('selectedAI', selectedAI);
    localStorage.setItem('aiName', aiName);
    localStorage.setItem('aiAvatar', aiAvatar);

    // G·ªçi AI t∆∞∆°ng ·ª©ng
    let aiModulePath;
    switch (selectedAI) {
      case 'nova':
        aiModulePath = './ai-nova.js';
        break;
      case 'zeta':
        aiModulePath = './ai-zeta.js';
        break;
      case 'lumi':
        aiModulePath = './ai-lumi.js';
        break;
      case 'online':
        showOnlineRoomOverlay(); // x·ª≠ l√Ω online ri√™ng n·∫øu c√≥
        return; // kh√¥ng c·∫ßn load AI local
      default:
        aiModulePath = './ai.js'; // basic: Meow
    }

    const mod = await import(aiModulePath);
    window.getAIMove = mod.getAIMove;
    // G·ªçi h√†m kh·ªüi t·∫°o AI n·∫øu c√≥

    setCurrentAIName(selectedAI);

    updatePlayerInfo(name, aiName, aiAvatar);
    window.createBoard();

    window.playPlaceSound = () => playSound('place'); // üîä Ph√°t √¢m thanh khi ƒë·∫∑t qu√¢n
  }, 2000);
});

function updatePlayerInfo(playerName, aiName, aiAvatar) {
  const leftInfo = document.createElement('div');
  leftInfo.className = 'player-info player';
  leftInfo.innerHTML = `
    <img src="assets/avatars/player.png" class="avatar" id="player-avatar" />
    <div class="player-reaction-box" id="player-reaction-box"></div>
    <div class="player-name">${playerName}<br><span id="player-level">Level 1</span></div>
  `;

  const rightInfo = document.createElement('div');
  rightInfo.className = 'player-info ai';
  rightInfo.innerHTML = `
    <img src="${aiAvatar}" class="avatar" id="ai-avatar" />
    <div class="player-name">${aiName}<br><span id="ai-level">Level 1</span></div>
  `;

  const timer = document.getElementById('timer');
  const wrapper = timer.parentElement;
  wrapper.style.display = 'flex';
  wrapper.style.alignItems = 'center';
  wrapper.style.justifyContent = 'space-between';
  wrapper.style.gap = '10px';
  wrapper.prepend(leftInfo);
  wrapper.append(rightInfo);
}
/* Th·ª≠ nghi·ªám gi·ªçng n√≥i AI */
let isVoiceEnabled = false;

window.isVoiceEnabled = false; // ƒê·ªÉ c√°c file kh√°c c√≥ th·ªÉ truy c·∫≠p

const voiceIcon = document.createElement('div');
voiceIcon.id = 'voice-toggle-icon';
voiceIcon.className = 'tooltip';
voiceIcon.dataset.tooltip = 'B·∫≠t/T·∫Øt gi·ªçng n√≥i AI (AI s·∫Ω ph·∫£n h·ªìi b·∫±ng l·ªùi n√≥i n·∫øu b·∫≠t)';
voiceIcon.innerText = 'üé§';
document.body.appendChild(voiceIcon);

voiceIcon.addEventListener('click', () => {
  isVoiceEnabled = !isVoiceEnabled;
  window.isVoiceEnabled = isVoiceEnabled; // ‚úÖ c·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c
  voiceIcon.classList.toggle('active', isVoiceEnabled);
  if (!isVoiceEnabled) window.speechSynthesis.cancel();
});

// Th√¥ng b√°o cho ch·∫ø ƒë·ªô online - t·∫°m th·ªùi kh√¥ng c√≥ AI
function showOnlineRoomOverlay() {
  // X√≥a overlay c≈© n·∫øu c√≥
  const old = document.getElementById('online-overlay');
  if (old) old.remove();

  // T·∫°o overlay
  const overlay = document.createElement('div');
  overlay.id = 'online-overlay';
  overlay.className = 'overlay-message';
  overlay.innerHTML = `
    <div class="overlay-box">
      <h2>üîß Ch·∫ø ƒë·ªô Online ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!</h2>
      <p>Vui l√≤ng quay l·∫°i sau ƒë·ªÉ tr·∫£i nghi·ªám phi√™n b·∫£n ho√†n ch·ªânh.</p>
      <button id="back-to-menu">Quay v·ªÅ Menu</button>
    </div>
  `;
  document.body.appendChild(overlay);

  // N√∫t quay v·ªÅ
  document.getElementById('back-to-menu').addEventListener('click', () => {
    location.reload(); // T·∫£i l·∫°i to√†n b·ªô trang
  });
}
